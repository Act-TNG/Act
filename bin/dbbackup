#!/usr/bin/env perl
#
# dbbackup: backup the act databases
#
# to restore:
#  % bin/dbinit | psql act
#  % pg_restore -a -d act actdb

use strict;

use Expect      qw();
use Getopt::Std qw(getopts);

use Act::Config;

use constant TIMEOUT     => 30;

# command line options
my %opts;
getopts('nv', \%opts) or die "usage: $0 [-nv]\n";
$|++;

# -n implies -v
$opts{v} = 1 if $opts{n};

dbdump(
       dumpfile => $Config->database_dump_file,
       name     => $Config->database_name,
       user     => $Config->database_user,
       passwd   => $Config->database_passwd,
       );

dbdump(
       dumpfile => $Config->wiki_dump_file,
       name     => $Config->wiki_dbname,
       user     => $Config->wiki_dbuser,
       passwd   => $Config->wiki_dbpass,
       );

sub dbdump
{
    my %args = @_;

    # build pg_dump command line
    my @cmd = (
            $Config->database_pg_dump,
            '-x',
            '-Fc',
            -U => $args{user},
            -f => $args{dumpfile},
            $args{name},
          );

    print join(' ', @cmd), "\n" if $opts{v};   # verbose
    return                      if $opts{n};   # dry run

    # spawn it
    my $e = Expect->spawn(@cmd)
        or die "Cannot spawn: $!\n";

    # wait for password prompt, but not forever
    # LBO>>> to uncomment if DB have a password in a next version
    #if ($Config->database_dump_needs_password) {
    #    $e->expect(TIMEOUT, 'Password: ')
    #        or die "Timeout waiting for password prompt\n";
    #    $e->send($args{passwd}, "\n");
    #}
    # <<<LBO
    # let it be
    $e->expect(undef);
}
