#!/usr/bin/env perl
use strict;
use Getopt::Long    qw(GetOptions);
use Pod::Usage      qw(pod2usage);

use Act::Config;
use Act::Email;
use Act::Util;

my @Row_names = qw(order_id user_id conf_id datetime first_name last_name email amount currency means);

my %Formats = ( c => 'CSV', t => 'Text' );

# command line arguments
my $format = 't';
my ($means, $dryrun, $help, $do_total);
GetOptions(
    'dry-run'       => \$dryrun,
    'format=s'      => sub { $format = lc(substr($_[1],0,1)) },
    'help'          => \$help,
    'means=s'       => \$means,
    'total'         => \$do_total,
) or pod2usage(0);
pod2usage(1) if $help;

exists $Formats{$format} or pod2usage("Unknown format: $format");
$do_total && $format eq 'c' and pod2usage("--ttotal not available for CSV format");

my @confs      = grep /^\w+$/, @ARGV or pod2usage("Must provide at least one conf_id");
my @recipients = grep /@/,     @ARGV;
@recipients || $dryrun or pod2usage('Must provide at least one recipient');

my $pkg = "My::Format::$Formats{$format}";
my $formatter = $pkg->new;

if ($dryrun) {
    print "Format:      ", $formatter->content_type, "\n";
    print "Conferences: @confs\n";
    print "Recipients:  @recipients\n" if @recipients;
    print "Means:       $means\n"      if $means;
    print "\n";
}

# connect to database
Act::Util::db_connect();

# extract relevant records
my $sql = <<EOF;
SELECT o.order_id, o.user_id, o.conf_id, o.datetime, u.first_name, u.last_name, u.email, SUM(oi.amount), o.currency, o.means
FROM orders o
LEFT JOIN users u ON (o.user_id = u.user_id )
LEFT JOIN order_items oi ON (o.order_id = oi.order_id)
WHERE o.status = ?
EOF
$sql .= ' AND o.means = ?' if $means;
$sql .= ' AND o.conf_id IN (' . join(',', map '?', @confs) . ')';
$sql .= <<EOF;
GROUP BY o.order_id, o.user_id, o.conf_id, o.datetime,
         u.first_name, u.last_name, u.email,
         o.currency, o.means
ORDER BY o.datetime
EOF

my $sth = $Request{dbh}->prepare($sql);
if ($means) {
    $sth->execute('paid', $means, @confs);
}
else {
    $sth->execute('paid', @confs);
}

# create report
my %total;    # total per conf

while (my @row = $sth->fetchrow_array) {
    $formatter->row(\@row);
    if ($do_total) {
        my ($conf_id, $amount, $currency) = @row[2,7,8];
        $total{$conf_id}{currency} = $currency;
        $total{$conf_id}{total} += $amount;
    }
}
if ($do_total) {
    $formatter->blank_line;
    for my $conf_id (sort keys %total) {
        $formatter->row([ 'Total', undef, $conf_id, undef, undef, undef, undef,
                          $total{$conf_id}{total}, $total{$conf_id}{currency},
                          undef ]);
    }
}
my $report = $formatter->render;

# display or send report
if ($dryrun) {
    # display report
    binmode STDOUT, ":utf8";
    print "$report\n";
}
else {
    # send email
    Act::Email::send(
        content_type => $formatter->content_type,
        from     => { name => 'Act', email => 'echo@mongueurs.net' },
        to       => \@recipients,
        subject  => "Act payment report",
        xheaders => { 'X-Act' => 'payment report' },
        body     => $report,
    );
}
##########################################
package My::Format::CSV;

sub content_type { 'text/csv' }
sub new
{
    my $class = shift;
    require Text::xSV;
    my $csv = Text::xSV->new;
    return bless {
        csv => $csv,
        output => $csv->format_row(@Row_names),
    }, $class;
}
sub row
{
    my ($self, $row) = @_;
    $self->{output} .= $self->{csv}->format_row(@$row);
}
sub render { shift->{output} }

##########################################
package My::Format::Text;

sub content_type { 'text/plain' }
sub new
{
    my $class = shift;
    require Text::TabularDisplay;
    return bless { table => Text::TabularDisplay->new(@Row_names) }, $class;
}
sub row
{
    my ($self, $row) = @_;
    $self->{table}->add(@$row);
}
sub blank_line
{
    shift->{table}->add((' ') x @Row_names);
}
sub render { shift->{table}->render }
##########################################

__END__

=head1 NAME

paymentreport - display or send payment reports

=head1 SYNOPSIS

  paymentreport [options] [email_address...] conf_id...

  Options:
    --format format         report format:
                              c[sv]    comma separated values
                              t[ext]   tabular text (default)
    --means means           only report on transactions with this payment means,
                            where means is one of CASH, CHQ, ONLINE, XFER, FREE.
    --dry-run               dry run: print report to STDOUT, no email
    --total                 include a Total line (only for text format)

=head1 OPTIONS

=over 4

=item B<--help>

Prints a brief help message and exits.

=item B<--dryrun>

Displays report on standard output. No email is sent.

=item B<--format>

Specify the report format: text (default) or csv.

=item B<--means>

Only report on payments made with that means, where means is one of CASH, CHQ, ONLINE, XFER or FREE.

=item B<--total>

Adds a total line. Not available for CSV reports.

=back

=head1 DESCRIPTION

Generates payment reports for one or more conferences.

=cut
