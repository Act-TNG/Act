#!/usr/bin/env perl
#
# extract multilingual text (<t>...</t>)
# from templates

use strict;

use File::Find     qw(find);
use Getopt::Std    qw(getopts);
use Template::Multilingual::Parser;

use Act::Config;

use constant LANGUAGES     => qw(de en fr hu it pt nl);
use constant TEMPLATE_DIRS => qw(static templates);

# global template parser object
my $parser = Template::Multilingual::Parser->new({});

# parse command line options
my %opts;
getopts('cvl:', \%opts) or usage();

# optional template files to process
if (@ARGV) {
    _extract($_) for @ARGV;
}
else {
    # global templates
    _extract(join '/', $Config->home, $_) for TEMPLATE_DIRS;

    # conference templates
    for my $conf (sort keys %{$Config->conferences}) {
        $Request{conference} = $conf;
        $Config = Act::Config::get_config($Request{conference});
        _extract(join '/', $Config->home, $conf, $_) for TEMPLATE_DIRS;
    }
}

# process a directory
sub _extract
{
    my $dir = shift;

    my @files;
    # read directory
    if (-d $dir) {
        find(sub {
                  local $_ = $File::Find::name;
                  -f && !/CVS/ && !/\.svn/ && push @files, $_;
                 },
             $dir
        );
    }
    elsif (-e $dir) {
        @files = ($dir);
    }
    # process each file
    for my $file (sort @files) {
        (my $fname = $file) =~ s!^$dir/!!;
        my $input;
        {
            local $/ = undef;
            open my $fh, $file or die "can't open $file: $!\n";
            $input = <$fh>;
            close $fh;
        }
        $parser->_tokenize($input);

        # loop on multilingual text sections
        my $num = 0;
        for my $section (@{$parser->sections()}) {
            my $texts = $section->{lang} or next;
            ++$num;
            print "$fname-$num\t" . join('', map("<$_>$texts->{$_}</$_>", sort keys %$texts)) . "\n" if $opts{v};
            if ($opts{l}) {
                my $ltext = exists $texts->{$opts{l}} ? $texts->{$opts{l}} : "TRANSLATEME";
                print "$fname-$num\t$ltext\n";
            }
            if ($opts{c}) {
                for my $language (LANGUAGES) {
                    print "$file-$num: missing $language\n"
                        unless exists $texts->{$language}
                                   && $texts->{$language} !~ /TRANSLATEME/;
                }
            }
        }
    }
}
##########
sub usage
{
    die <<EOF;
Usage: $0 [-vc] [-l language]

options:
  -v            verbose (prints all text sections)
  -l language   display a specific language
  -c            check for missing text
EOF
}
